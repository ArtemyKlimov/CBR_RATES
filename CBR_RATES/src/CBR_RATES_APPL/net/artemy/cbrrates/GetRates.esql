BROKER SCHEMA net.artemy.cbrrates
DECLARE RATES			SHARED ROW;
DECLARE SOAP_ENV_NS 	NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';
DECLARE CBR_NS			NAMESPACE 'http://web.cbr.ru/';
DECLARE UNIQUE_CORREL_ID BLOB CAST('111111111111111111111111' AS BLOB CCSID 1208);

CREATE COMPUTE MODULE GetRates_CreateWSRequest
	DECLARE CBR_WS_URL EXTERNAL CHAR '';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF NOT EXISTS(RATES.*[]) THEN
			CALL GetLastCallRates();
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
		DECLARE requestDate CHAR inRef.Date;
		DECLARE lastCallDate CHAR COALESCE(RATES.ON_DATE, '');
		IF LENGTH(requestDate) <> 10  OR LENGTH(REPLACE(requestDate, '-', '')) <> 8 THEN
			SET Environment.Variables.Message = 'Невалидная дата в запросе' || COALESCE(': ' || requestDate, '') || '. Требуемый формат: ' || common.getWSDateFormat();
			PROPAGATE TO LABEL 'FINISH';
			RETURN FALSE; 
		END IF;
		IF lastCallDate <> '' AND lastCallDate = requestDate THEN
			SET Environment.Variables.Message = 'Данные на ' || lastCallDate || ' уже были отправлены';
			PROPAGATE TO LABEL 'FINISH';
			RETURN FALSE; --> Если ранее уже за данную дату отправлялись курсы, то второй раз не отправляем
		END IF;
		CALL SaveDataToEnvironment(requestDate);
		CALL CreateWSRequestMessage(requestDate);
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL =  CBR_WS_URL;
		RETURN TRUE;
	END;


CREATE PROCEDURE GetLastCallRates()
BEGIN
	IF (NOT EXISTS(OutputRoot.Properties[])) THEN
			CREATE FIRSTCHILD OF OutputRoot DOMAIN 'Properties';
	END IF;
	SET OutputRoot.Properties = InputRoot.Properties;
	CREATE LASTCHILD OF OutputRoot DOMAIN 'MQMD';
	SET OutputRoot.MQMD.CorrelId = UNIQUE_CORREL_ID;
	PROPAGATE TO TERMINAL 'out1';
END;

CREATE PROCEDURE SaveDataToEnvironment(IN requestDate CHAR)
BEGIN
	SET Environment.Variables.RequestDate = requestDate;
	SET Environment.Variables.MsgId = InputRoot.MQMD.MsgId;
END;

CREATE PROCEDURE SetHttpHeaders()
BEGIN
	SET OutputRoot.HTTPRequestHeader."Content-Type" = 'text/xml;charset=UTF-8';
	SET OutputRoot.HTTPRequestHeader.SOAPAction 	= 'http://web.cbr.ru/GetCursOnDateXML';
END;
	
CREATE PROCEDURE CreateWSRequestMessage(IN requestDate CHAR)
BEGIN
	IF (NOT EXISTS(OutputRoot.Properties[])) THEN
		CREATE FIRSTCHILD OF OutputRoot DOMAIN 'Properties';
	END IF;
	CALL SetHttpHeaders();
	SET OutputRoot.Properties = InputRoot.Properties;
	CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
	DECLARE outRef REFERENCE TO OutputRoot.XMLNSC;
	CREATE LASTCHILD OF outRef AS outRef NAMESPACE SOAP_ENV_NS NAME 'Envelope';
	SET outRef.(XMLNSC.NamespaceDecl)xmlns:soapenv = SOAP_ENV_NS;
	CREATE LASTCHILD OF outRef NAMESPACE SOAP_ENV_NS NAME 'Header';
	CREATE LASTCHILD OF outRef AS outRef NAMESPACE SOAP_ENV_NS NAME 'Body';
	CREATE LASTCHILD OF outRef AS outRef NAMESPACE CBR_NS NAME 'GetCursOnDateXML';
	SET outRef.CBR_NS:On_date = requestDate;
END;
	
END MODULE;


CREATE COMPUTE MODULE GetRates_ProcessHTTPSuccess
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF NOT EXISTS(InputRoot.XMLNSC.*[]) THEN
			THROW USER EXCEPTION MESSAGE 3003 VALUES ('Empty CRB Response');
		END IF;
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC.SOAP_ENV_NS:Envelope.SOAP_ENV_NS:Body.*:GetCursOnDateXMLResponse.*:GetCursOnDateXMLResult;
		DECLARE valueDateRef 		REFERENCE TO inRef.*:ValuteData;
		DECLARE wsResultChar		CHAR valueDateRef.(XMLNSC.Attribute)"OnDate";
		DECLARE wsResultDate		DATE CAST(wsResultChar AS DATE FORMAT 'yyyyMMdd');
		DECLARE onDate				CHAR CAST(wsResultDate AS CHAR FORMAT common.getWSDateFormat());
		DECLARE lastCallDate		CHAR COALESCE(RATES.ON_DATE, '');
		
		IF lastCallDate = onDate THEN
			SET Environment.Variables.Message = 'Запрос курсов ЦБ на ' || Environment.Variables.RequestDate || '. Данные на ' || lastCallDate || ' уже были отправлены';
			PROPAGATE TO LABEL 'FINISH';
			RETURN FALSE;
		END IF;
		
		DECLARE cursRef			REFERENCE TO valueDateRef;
		MOVE cursRef 			FIRSTCHILD TYPE XMLNSC.Element;
		
		IF LASTMOVE(cursRef) THEN
			IF EXISTS(RATES.*[]) THEN
				DECLARE lastCalLDateDate	DATE CAST(lastCallDate AS DATE FORMAT common.getWSDateFormat());
				CALL SendRatesForPreviousDates(lastCalLDateDate, wsResultDate ); --> отправляем курсы за предыдущие дни
			END IF;
			CREATE LASTCHILD OF Environment.Variables NAME 'NewRates';
			DECLARE newRatesRef 	REFERENCE TO Environment.Variables.NewRates;
			DECLARE tmpRef 			REFERENCE TO cursRef;
			SET newRatesRef.ON_DATE	= onDate;
			CREATE LASTCHILD OF newRatesRef NAME 'CURRENCIES';
			WHILE LASTMOVE(cursRef) DO
				CREATE LASTCHILD OF newRatesRef.CURRENCIES AS tmpRef NAME 'ITEM';
				DECLARE rate		CHAR CASE COALESCE(cursRef.Vnom, '') WHEN '' THEN cursRef.Vcurs WHEN '0' THEN cursRef.Vcurs ELSE CAST(ROUND(CAST(cursRef.Vcurs AS DECIMAL) / CAST(cursRef.Vnom AS INT), 5) AS CHAR) END;
				CALL SendOutMessage(onDate ,cursRef.VchCode, rate);
				SET tmpRef.NAME 	= cursRef.VchCode;
				SET tmpRef.VALUE 	= rate;
				MOVE cursRef NEXTSIBLING NAME 'ValuteCursOnDate';
			END WHILE;
			--После отправки всех курсов обновляем буффер и кэш
			MOVE newRatesRef TO Environment.Variables.NewRates;
			CALL RenewBufferMessage(newRatesRef);
		ELSE 
			SET Environment.Variables.Message = 'Данные на ' || onDate || ' не были предоставлены ЦБ';
			PROPAGATE TO LABEL 'FINISH';
		END IF;
		RETURN FALSE;
	END;
	
	CREATE PROCEDURE SendRatesForPreviousDates(IN lastCalLDateDate DATE, IN wsResultDate DATE)
	BEGIN				
		DECLARE tmpDate			DATE lastCalLDateDate + INTERVAL '1' DAY;
		WHILE tmpDate < wsResultDate DO
			DECLARE oldRatesRef REFERENCE TO RATES.CURRENCIES;
			MOVE oldRatesRef FIRSTCHILD;
			WHILE LASTMOVE(oldRatesRef) DO
				CALL SendOutMessage(CAST(tmpDate AS CHAR FORMAT common.getWSDateFormat()), oldRatesRef.NAME, oldRatesRef.VALUE);
				MOVE oldRatesRef NEXTSIBLING;
			END WHILE;
			SET tmpDate = tmpDate + INTERVAL '1' DAY;
		END WHILE;	
	END;
	
	CREATE PROCEDURE RenewBufferMessage(IN newRatesRef REFERENCE)
	BEGIN
		IF (NOT EXISTS(OutputRoot.Properties[])) THEN
			CREATE FIRSTCHILD OF OutputRoot DOMAIN 'Properties';
		END IF;		
		CREATE LASTCHILD OF OutputRoot DOMAIN 'MQMD';
		SET OutputRoot.MQMD.CodedCharSetId = 1208;
		SET OutputRoot.MQMD.CorrelId = UNIQUE_CORREL_ID;

		PROPAGATE TO TERMINAL 'out2';
	END;
	
	CREATE PROCEDURE SendOutMessage(IN onDate CHAR, IN currency CHAR, IN rate CHAR)
	BEGIN
		CREATE LASTCHILD OF OutputRoot DOMAIN 'MQMD';
		SET OutputRoot.MQMD.CodedCharSetId = 1208;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
		SET outRef.Date 	=	onDate;
		SET outRef.Currency =	currency;
		SET outRef.Rate 	=	rate;
		PROPAGATE TO TERMINAL 'out3';	
	END;
END MODULE;

CREATE COMPUTE MODULE GetRates_RenewCache
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CREATE LASTCHILD OF OutputRoot DOMAIN 'MQMD';
		SET OutputRoot.MQMD.CodedCharSetId = 1208;
		SET OutputRoot.MQMD.CorrelId = UNIQUE_CORREL_ID;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC';
		DECLARE newRatesRef REFERENCE TO Environment.Variables.NewRates;
		SET OutputRoot.XMLNSC.RATES = newRatesRef;
		PROPAGATE TO TERMINAL 'out1';
		SET RATES VALUE = NULL;
		SET RATES = newRatesRef;
		RETURN FALSE;
	END;

END MODULE;

CREATE COMPUTE MODULE GetRates_SaveIntoCache
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE inRef 			REFERENCE TO InputRoot.XMLNSC;
		MOVE inRef TO inRef.RATES;
		IF LASTMOVE(inRef) THEN
			SET RATES = inRef;
		END IF;
		RETURN FALSE;
	END;

END MODULE;

CREATE COMPUTE MODULE GetRates_ProcessHTTPError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE EXIT HANDLER FOR SQLSTATE LIKE '' BEGIN
			THROW USER EXCEPTION MESSAGE 3004 VALUES('CBR_RATES', 'Exception occured while parsing Web Service Response');
		END;
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC.SOAP_ENV_NS:Envelope.SOAP_ENV_NS:Body.SOAP_ENV_NS:Fault;
		DECLARE faultcode CHARACTER inRef.faultcode;
		DECLARE faultstring CHARACTER inRef.faultstring;
		THROW USER EXCEPTION MESSAGE 3004 VALUES(faultcode, faultstring);	
		RETURN FALSE;
	END;
END MODULE;